<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基物考前梳理</title>
      <link href="/2023/08/09/%E5%9F%BA%E7%89%A9%E8%80%83%E5%89%8D%E6%A2%B3%E7%90%86/"/>
      <url>/2023/08/09/%E5%9F%BA%E7%89%A9%E8%80%83%E5%89%8D%E6%A2%B3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>在期末复习《基础物理学（信息类）》（2023年春季）时，总结了表格若干以梳理知识体系。</p><h1 id="平动转动类比"><a href="#平动转动类比" class="headerlink" title="平动转动类比"></a>平动转动类比</h1><p>平动和转动在<strong>原理上</strong>是要分开研究的，但是由于二者在<strong>公式形式</strong>上具有相似性，因此我们在研究刚体力学时，可以用质点的平动来类比刚体的转动（主要是方便记忆）：</p><ul><li>惯量</li></ul><table><thead><tr><th align="center">质点平动</th><th align="center">刚体转动</th></tr></thead><tbody><tr><td align="center">质量（$m$）</td><td align="center">转动惯量（$I$）</td></tr></tbody></table><ul><li>运动</li></ul><table><thead><tr><th align="center">质点平动</th><th align="center">刚体转动</th></tr></thead><tbody><tr><td align="center">位移（$x$)</td><td align="center">角位移（$\Delta\theta$）</td></tr><tr><td align="center">速度（$v$）</td><td align="center">角速度（$\omega$）</td></tr><tr><td align="center">加速度（$a$）</td><td align="center">角加速度（$\beta$）</td></tr></tbody></table><ul><li>动力</li></ul><table><thead><tr><th align="center">质点平动</th><th align="center">刚体转动</th></tr></thead><tbody><tr><td align="center">力（$F$）</td><td align="center">力矩（$\vec M=\vec r\times\vec F$）</td></tr><tr><td align="center">牛顿第二定律（$\vec F=m\vec a$）</td><td align="center">定轴转动定律（$M=I\beta$）</td></tr></tbody></table><ul><li>动量</li></ul><table><thead><tr><th align="center">质点平动</th><th align="center">刚体转动</th></tr></thead><tbody><tr><td align="center">动量（$\vec p=m\vec v$)</td><td align="center">角动量（$L=I\omega$）</td></tr><tr><td align="center">动量定理 （$\displaystyle\int_{t_1}^{t_2}\vec F_外dt=m\vec v_2-m\vec v_1$）</td><td align="center">角动量变化定理 （$\displaystyle\int_{t_1}^{t_2}Mdt=I\omega_2-I\omega_1$）</td></tr></tbody></table><ul><li>动能</li></ul><table><thead><tr><th align="center">质点平动</th><th align="center">刚体转动</th></tr></thead><tbody><tr><td align="center">动能（$\displaystyle E_k=\frac{1}{2}mv^2$）</td><td align="center">转动动能（$\displaystyle E_k=\frac{1}{2}Iw^2$）</td></tr><tr><td align="center">动能定理 （$\displaystyle\int_L\vec Fd\vec r=\frac{1}{2}mv_2^2-\frac{1}{2}mv_1^2$）</td><td align="center">动能定理 （$\displaystyle\int_{\theta_1}^{\theta_2}Md\theta=\frac{1}{2}I\omega_2^2-\frac{1}{2}I\omega_1^2$）</td></tr></tbody></table><h1 id="三个物理量的定义及其变化定理"><a href="#三个物理量的定义及其变化定理" class="headerlink" title="三个物理量的定义及其变化定理"></a>三个物理量的定义及其变化定理</h1><p>在<code>力学</code>部分中，前面的 <code>运动学</code> 和 <code>牛顿三大定律</code> 不过是高中知识的再回顾（除了”惯性力“），后面的<code>刚体力学</code> 部分已总结如上。剩下的就是中间的 <code>动量</code>、<code>动能</code> 和 <code>角动量</code> 三大物理量的学习，而这三者之间很容易混淆，比如：</p><ul><li>“合外力为0，质点的动量改变吗？动能呢？角动量呢？质点组呢？”</li><li>“机械能不变<code>==</code>机械能守恒吗？”</li><li>……</li></ul><p>再比如下面这道题：</p><blockquote><p>关于机械能守恒条件和动量守恒条件有以下几种说法，其中正确的是：</p><p>(A) 不受外力作用的系统，其动量和机械能必然同时守恒</p><p>(B) 所受合外力为零，内力都是保守力的系统，其机械能必然守恒</p><p>(C) 不受外力，而内力都是保守力的系统，其动量和机械能必然同时守恒</p><p>(D) 外力对一个系统做的功为零，则该系统的机械能和动量必然同时守恒</p><p>答案是 <code>C</code> （<code>B</code>选项为何错误？？）</p></blockquote><p>这就需要我们回到<strong>原始定义</strong>，并采取<strong>对比</strong>的策略了解并厘清这三个物理量。</p><table><thead><tr><th align="center"></th><th align="center">动量</th><th align="center">动能</th><th align="center">角动量</th></tr></thead><tbody><tr><td align="center">定义</td><td align="center">$\vec p=m\vec v$</td><td align="center">$\displaystyle E_k=\frac{1}{2}mv^2$</td><td align="center">$\vec L=\vec r\times m\vec v$</td></tr><tr><td align="center">质点的变化定理</td><td align="center">$\displaystyle\int_{t_1}^{t_2}\vec Fdt=\Delta \vec p$</td><td align="center">$\displaystyle\int_L\vec Fd\vec r=\Delta E_k$</td><td align="center">$\displaystyle\int_{t_1}^{t_2}\vec Mdt=\Delta \vec L$</td></tr><tr><td align="center">质点组的变化定理</td><td align="center">$\displaystyle\int_{t_1}^{t_2}\vec F_外dt=\Delta \vec p$</td><td align="center">$A_外+A_内=\Delta E_k$</td><td align="center">$\displaystyle\int_{t_1}^{t_2}\vec M_外dt=\Delta \vec L$</td></tr><tr><td align="center">守恒条件</td><td align="center"><strong>动量守恒</strong>：合外力为$0$</td><td align="center"><strong>机械能守恒</strong>：只有保守内力做功（外力、非保守内力不做功）</td><td align="center"><strong>角动量守恒：</strong>$\vec M_外=0\rightarrow\begin{cases}\vec F=0\\\vec F过参考点O\end{cases}$</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数理基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Physics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>串的模式匹配</title>
      <link href="/2023/08/06/%E4%B8%B2%E7%9A%84%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/"/>
      <url>/2023/08/06/%E4%B8%B2%E7%9A%84%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<p>串的模式匹配（Pattern Matching）：字符串的定位。</p><p>给定一个<strong>主字符串</strong>$S$和一个子串$T$(又称<strong>模式串</strong>)，长度分别为$n$和$m$。在主串$S$中，从起始位置开始查找，若在主串$S$中找到一个与子串$T$相等的子串，则返回$T$的第一个字符在主串中的位置序号。</p><blockquote><p>例如：$S=$ <code>&quot;Beijing&amp;Nanjing&amp;Shanghai&quot;</code>      </p><p>​           $T=$ <code>&quot;jing&quot;</code></p><p>返回：$4$</p></blockquote><h1 id="经典的朴素字符串查找算法（Brute-Force"><a href="#经典的朴素字符串查找算法（Brute-Force" class="headerlink" title="经典的朴素字符串查找算法（Brute-Force)"></a>经典的朴素字符串查找算法（Brute-Force)</h1><p>时间复杂度：$O(nm)$</p><p>下面是2种形式的写法(写法1和写法2完全等价)</p><p>写法1：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">index</span><span class="params">(<span class="type">char</span> s[ ], <span class="type">char</span> t[ ])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i, j, k;</span><br><span class="line">    <span class="keyword">for</span>(i =<span class="number">0</span>; s[i] != <span class="string">&#x27;\0&#x27;</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j=i,k=<span class="number">0</span>;t[k]!=<span class="string">&#x27;\0&#x27;</span>&amp;&amp;s[j]==t[k]; j++,k++)</span><br><span class="line">        ;</span><br><span class="line">        <span class="keyword">if</span>(t[k] == <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> (i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写法2：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">index</span><span class="params">(<span class="type">char</span> S[ ], <span class="type">char</span> T[ ])</span> </span><br><span class="line">&#123;</span><br><span class="line">     <span class="type">int</span> i = <span class="number">0</span>,  j=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">while</span> ( S[i]!=<span class="string">&#x27;\0&#x27;</span>  &amp;&amp;  T[j]!=<span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (S [i] == T[j] ) &#123;</span><br><span class="line">             i++;   </span><br><span class="line">             j++ </span><br><span class="line">         &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            i = i-j +<span class="number">1</span>;</span><br><span class="line">            j = <span class="number">0</span>; </span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> ( T[j] == <span class="string">&#x27;\0&#x27;</span>) </span><br><span class="line">         <span class="keyword">return</span>  i-j;  </span><br><span class="line">    <span class="keyword">else</span>    </span><br><span class="line">         <span class="keyword">return</span> <span class="number">-1</span>;                   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>算法改进：</strong>当$S$中剩余字符数小于$T$中字符数$(n-i&lt;m)$时，停止查找</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">index</span><span class="params">(<span class="type">char</span> s[ ], <span class="type">char</span> t[ ])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i, j, k,n,m;</span><br><span class="line">    n = <span class="built_in">strlen</span>(s); </span><br><span class="line">    m = <span class="built_in">strlen</span>(t);</span><br><span class="line">    <span class="keyword">for</span>(i =<span class="number">0</span>; n-i &gt;= m; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j=i,k=<span class="number">0</span>;t[k]!=<span class="string">&#x27;\0&#x27;</span>&amp;&amp;s[j]==t[k]; j++,k++)</span><br><span class="line">            ;</span><br><span class="line"><span class="keyword">if</span>(t[k] == <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> ( i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>朴素字符串匹配算法存在的问题：</strong></p><p>当前匹配在找到不匹配的字符后，要将主串中下一次匹配开始位置移动一个位置（即要回溯），而不管当前匹配情况，如下图。</p><p><img src="/img/essay1-fig1.png" alt="图1"></p><h1 id="KMP-Knuth-Morris-Pratt-算法"><a href="#KMP-Knuth-Morris-Pratt-算法" class="headerlink" title="KMP(Knuth-Morris-Pratt)算法"></a>KMP(Knuth-Morris-Pratt)算法</h1><p>时间复杂度：$O(n+m)$</p><h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><p>源串称为主串，定义为$S$，当前匹配位置为$i$；目标串称为子串，定义为$T$，当前匹配位置为$j$。当前匹配在找到不匹配的字符后，重新开始匹配时：</p><ol><li>主串当前位置$i$不回溯，即不重置为上次匹配开始位置的一下位置；</li><li>子串当前位置$j$视情况回溯至起始串位置（0），或子串中某一位置。(如下图)</li></ol><p><img src="/img/essay1-fig2.png" alt="图2"></p><h2 id="next函数"><a href="#next函数" class="headerlink" title="next函数"></a>next函数</h2><p>KMP算法核心思想便是计算子串回溯位置。首先明确字符串的前缀和后缀的定义：</p><ul><li><strong>前缀：</strong>不包括最后一个字符的子串</li><li><strong>后缀：</strong>不包含第一个字符的子串</li></ul><p>根据子串$T$当前匹配的规律：  $ T_0…T_{k-1}=T_{j-k} …T_{j-1}$由当前失配位置$j$(已知) ，可以归纳计算下次匹配起点$k$的表达式。</p><p>令$k = next[ j ]$（函数$next$用子串当前位置$j$来计算下次开始匹配位置$k$，$k$ 与$j$ 显然具有函数关系），则<br>$$<br>next[j]=\begin{cases}-1&amp;,j=0\\max\{k\mid0&lt;k&lt;j且T_0…T_{k-1}=T_{j-k} …T_{j-1}\}\\0&amp;,其他情况\end{cases}<br>$$<br>注意：</p><ol><li><p>$k$值仅取决于子串本身而与相匹配的主串无关。</p></li><li><p>$k$值为子串从头向后及从j向前的两部分子串最大相同子串的长度。</p></li><li><p>这里的两部分子串<strong>可以有部分重叠</strong>的字符，但<strong>不可以全部重叠</strong>，即$k$最大为$j-1$。例如：</p></li></ol><p><img src="/img/essay1-fig3.png" alt="例图"></p><p><strong>算法分析：</strong></p><ol><li><p>首先必然有$next[0]=-1$，$next[1]=0$;</p></li><li><p>若存在$next[j]=k$，即存在$ T_0 \dots T_{k-1} = T_{j-k} \dots T_{j-1} $：</p><ul><li><p>若此时$T_{k}=T_{j} $，则存在$ T_{0} \dots T_{k-1} T_{k} = T_{j-k} \dots T_{j-1} T_{j}$，因此<br>$$<br>next[j+1]=next[j]+1=k+1\tag{1}<br>$$</p></li><li><p>若$T_k\neq T_j$，则继续$k:=next[k]$直到$k=-1$：</p><p>$repeat\ until\ k=-1\{$<br>$$<br>\begin{matrix}<br>k:=next[k]\\T_{k}=T_j\ ?\begin{cases}Yes:next[j+1]=k+1,break\\No:continue\end{cases}<br>\tag{2}<br>\end{matrix}<br>$$<br>$\}$</p></li></ul><p><strong>e.g.</strong>    $s=$<code>&quot;ababcabcabab&quot;</code></p><p><img src="/img/essay1-fig4.png" alt=""></p><p><strong>Step:</strong></p><ol start="0"><li>next[0]=-1；</li><li>next[1]=0；</li><li>next[2]=0；$T_0=T_2$</li><li>next[3]=1；$T_1=T_3$</li><li>next[4]=2；$T_2\neq T_4$，k=next[2]=0；$T_0 \neq T_4$，k=next[0]=-1，达到边界</li><li>next[5]=0；$T_0=T_5$</li><li>next[6]=1；$T_1=T_6$</li><li>next[7]=2；$T_2 \neq T_7$，k=next[2]=0；$T_0 \neq T_7$，k=next[0]=-1，达到边界</li><li>next[8]=0；$T_0=T_8$</li><li>next[9]=1；$T_1=T_9$</li><li>next[10]=2；$T_2=T_{10}$</li><li>next[11]=3；($T_3=T_{11}$)</li></ol></li></ol><blockquote><p><strong>思考：$T_k= T_j$时向后递推的正确性显然。但是为什么当$T_k\neq T_j$时，通过$k:=next[k]$<font color=orange>向前回溯</font>(如下)的方法的正确性呢？</strong></p></blockquote><p>$$<br>\begin{matrix} T_k=T_j?\\T_{next[k]}=T_j?\\T_{next[next[k]]}=T_j?\\\dots \<br>  \end{matrix}<br>$$<br>以下面这个模式串$T$为例：</p><p>当前缀$k=5,T_k=m$，后缀$j=11,T_{j}=x$时，$T_k\neq T_j$</p><p>那么$k$回溯为$next[k]=2$</p><p><img src="/img/essay1-fig5" alt="image-20230331224204741"></p><p>这样的回溯保证了$S_I$、$S_{II}$、$S_{III}$和$S_{IV}$四个字串完全相等，尤其是$S_I$和$S_{IV}$两个字串的完全相等保证了$S_I+T_k$组成新的前缀，$S_{IV}+T_j$组成新的后缀，通过判断新的$T_k=T_j?$便可以再次递推(向前或回溯)。当回溯到$k=-1$时达到边界。</p><p><img src="/img/essay1-fig6" alt="image-20230331224222506"></p><p><strong>getnext函数：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">getnext</span><span class="params">(<span class="type">char</span> T[], <span class="type">int</span> next[])</span></span><br><span class="line">&#123;  </span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>, j=<span class="number">-1</span>;</span><br><span class="line">    next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(T[i]!=<span class="string">&#x27;\0&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(j==<span class="number">-1</span> || T[i]==T[j])&#123; <span class="comment">//i为后缀位置；j为前缀位置</span></span><br><span class="line">            i++; </span><br><span class="line">            j++; </span><br><span class="line">            next[i]=j; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            j = next[j]; <span class="comment">//若字符不同，则j值回溯</span></span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>KMPindex函数：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">KMPindex</span><span class="params">(<span class="type">char</span> S[ ], <span class="type">char</span> T[ ])</span> </span><br><span class="line">&#123;</span><br><span class="line">     <span class="type">int</span> i = <span class="number">0</span>,  j=<span class="number">0</span>, *next;</span><br><span class="line"></span><br><span class="line">     next = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*(<span class="built_in">strlen</span>(T)+<span class="number">1</span>));</span><br><span class="line">     getnext(T, next);</span><br><span class="line">     <span class="keyword">while</span> ( S[i]!= <span class="string">&#x27;\0&#x27;</span>  &amp;&amp;  T[j]!= <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (S [i] == T[j] ) &#123;</span><br><span class="line">             i++;   </span><br><span class="line">             j++ ;</span><br><span class="line">         &#125; </span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">             (j == <span class="number">0</span>) ? i++ :( j = next[j]); <span class="comment">//j回退到相应位置开始匹配，i值不变</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="built_in">free</span>(next);</span><br><span class="line">     <span class="keyword">if</span> ( T[j] == <span class="string">&#x27;\0&#x27;</span>) <span class="comment">//匹配成功，返回匹配位置</span></span><br><span class="line">         <span class="keyword">return</span>  i-j;  </span><br><span class="line">    <span class="keyword">else</span>    </span><br><span class="line">         <span class="keyword">return</span> <span class="number">-1</span>;                   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于下标$i$无须回溯，比较次数仅为$n$，即使加上计算$next[j]$时所用的比较次数$m$，比较总次数也仅为$n+m=O(n+m)$，大大快于朴素的Brute-Force算法。</p>]]></content>
      
      
      <categories>
          
          <category> data structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/08/06/hello-world/"/>
      <url>/2023/08/06/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
