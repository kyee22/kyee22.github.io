<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基物考前梳理</title>
      <link href="/2023/08/09/%E5%9F%BA%E7%89%A9%E8%80%83%E5%89%8D%E6%A2%B3%E7%90%86/"/>
      <url>/2023/08/09/%E5%9F%BA%E7%89%A9%E8%80%83%E5%89%8D%E6%A2%B3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>在期末复习《基础物理学（信息类）》（2023年春季）时，总结了表格若干以梳理知识体系。</p><h1 id="平动转动类比"><a href="#平动转动类比" class="headerlink" title="平动转动类比"></a>平动转动类比</h1><p>平动和转动在<strong>原理上</strong>是要分开研究的，但是由于二者在<strong>公式形式</strong>上具有相似性，因此我们在研究刚体力学时，可以用质点的平动来类比刚体的转动（主要是方便记忆）：</p><ul><li>惯量</li></ul><table><thead><tr><th align="center">质点平动</th><th align="center">刚体转动</th></tr></thead><tbody><tr><td align="center">质量（$m$）</td><td align="center">转动惯量（$I$）</td></tr></tbody></table><ul><li>运动</li></ul><table><thead><tr><th align="center">质点平动</th><th align="center">刚体转动</th></tr></thead><tbody><tr><td align="center">位移（$x$)</td><td align="center">角位移（$\Delta\theta$）</td></tr><tr><td align="center">速度（$v$）</td><td align="center">角速度（$\omega$）</td></tr><tr><td align="center">加速度（$a$）</td><td align="center">角加速度（$\beta$）</td></tr></tbody></table><ul><li>动力</li></ul><table><thead><tr><th align="center">质点平动</th><th align="center">刚体转动</th></tr></thead><tbody><tr><td align="center">力（$F$）</td><td align="center">力矩（$\vec M=\vec r\times\vec F$）</td></tr><tr><td align="center">牛顿第二定律（$\vec F=m\vec a$）</td><td align="center">定轴转动定律（$M=I\beta$）</td></tr></tbody></table><ul><li>动量</li></ul><table><thead><tr><th align="center">质点平动</th><th align="center">刚体转动</th></tr></thead><tbody><tr><td align="center">动量（$\vec p=m\vec v$)</td><td align="center">角动量（$L=I\omega$）</td></tr><tr><td align="center">动量定理 （$\displaystyle\int_{t_1}^{t_2}\vec F_外dt=m\vec v_2-m\vec v_1$）</td><td align="center">角动量变化定理 （$\displaystyle\int_{t_1}^{t_2}Mdt=I\omega_2-I\omega_1$）</td></tr></tbody></table><ul><li>动能</li></ul><table><thead><tr><th align="center">质点平动</th><th align="center">刚体转动</th></tr></thead><tbody><tr><td align="center">动能（$\displaystyle E_k=\frac{1}{2}mv^2$）</td><td align="center">转动动能（$\displaystyle E_k=\frac{1}{2}Iw^2$）</td></tr><tr><td align="center">动能定理 （$\displaystyle\int_L\vec Fd\vec r=\frac{1}{2}mv_2^2-\frac{1}{2}mv_1^2$）</td><td align="center">动能定理 （$\displaystyle\int_{\theta_1}^{\theta_2}Md\theta=\frac{1}{2}I\omega_2^2-\frac{1}{2}I\omega_1^2$）</td></tr></tbody></table><h1 id="三个物理量的定义及其变化定理"><a href="#三个物理量的定义及其变化定理" class="headerlink" title="三个物理量的定义及其变化定理"></a>三个物理量的定义及其变化定理</h1><p>在<code>力学</code>部分中，前面的 <code>运动学</code> 和 <code>牛顿三大定律</code> 不过是高中知识的再回顾（当然除了”惯性力“），后面的<code>刚体力学</code> 部分已总结如上。剩下的就是中间的 <code>动量</code>、<code>动能</code> 和 <code>角动量</code> 三大板块的学习，而这三者之间很容易混淆，比如：</p><ul><li>“合外力为0，质点的动量改变吗？动能呢？角动量呢？质点组呢？”</li><li>“机械能不变<code>==</code>机械能守恒吗？”</li><li>……</li></ul><p>再比如下面这道题：</p><blockquote><p>关于机械能守恒条件和动量守恒条件有以下几种说法，其中正确的是：</p><p>(A) 不受外力作用的系统，其动量和机械能必然同时守恒<br>(B) 所受合外力为零，内力都是保守力的系统，其机械能必然守恒<br>(C) 不受外力，而内力都是保守力的系统，其动量和机械能必然同时守恒<br>(D) 外力对一个系统做的功为零，则该系统的机械能和动量必然同时守恒</p><p>答案是 <code>C</code> （<code>B</code>选项为何错误？？）</p></blockquote><p>这就需要我们回到<strong>原始定义</strong>，并采取<strong>对比</strong>的策略了解并厘清这三个物理量。</p><table><thead><tr><th align="center"></th><th align="center">动量</th><th align="center">动能</th><th align="center">角动量</th></tr></thead><tbody><tr><td align="center">定义</td><td align="center">$\vec p=m\vec v$</td><td align="center">$\displaystyle E_k=\frac{1}{2}mv^2$</td><td align="center">$\vec L=\vec r\times m\vec v$</td></tr><tr><td align="center">质点的变化定理</td><td align="center">$\displaystyle\int_{t_1}^{t_2}\vec Fdt=\Delta \vec p$</td><td align="center">$\displaystyle\int_L\vec Fd\vec r=\Delta E_k$</td><td align="center">$\displaystyle\int_{t_1}^{t_2}\vec Mdt=\Delta \vec L$</td></tr><tr><td align="center">质点组的变化定理</td><td align="center">$\displaystyle\int_{t_1}^{t_2}\vec F_外dt=\Delta \vec p$</td><td align="center">$A_外+A_内=\Delta E_k$</td><td align="center">$\displaystyle\int_{t_1}^{t_2}\vec M_外dt=\Delta \vec L$</td></tr><tr><td align="center">守恒条件</td><td align="center"><strong>动量守恒</strong>：合外力为$0$</td><td align="center"><strong>机械能守恒</strong>：只有保守内力做功（外力、非保守内力不做功）</td><td align="center"><strong>角动量守恒：</strong>$\vec M_外=0\rightarrow\begin{cases}\vec F=0\\\vec F过参考点O\end{cases}$</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数理基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Physics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《离散数学及其应用——Python建模与实现》代码整理</title>
      <link href="/2023/08/08/%E3%80%8A%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E2%80%94%E2%80%94Python%E5%BB%BA%E6%A8%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E3%80%8B%E4%BB%A3%E7%A0%81%E6%95%B4%E7%90%86/"/>
      <url>/2023/08/08/%E3%80%8A%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E2%80%94%E2%80%94Python%E5%BB%BA%E6%A8%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E3%80%8B%E4%BB%A3%E7%A0%81%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>by TAs of <em>Discrete Math (Information Class) (2023 Spring)</em> course</p></blockquote><h1 id="DiscreteMath"><a href="#DiscreteMath" class="headerlink" title="DiscreteMath"></a>DiscreteMath</h1><blockquote><p>《离散数学及其应用——Python建模与实现》代码整理</p></blockquote><h3 id="数理逻辑篇"><a href="#数理逻辑篇" class="headerlink" title="数理逻辑篇"></a>数理逻辑篇</h3><p>文件夹名：<code>logic</code></p><p>1-4章 <code>logic.py</code></p><h4 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h4><table><thead><tr><th>函数名</th><th>函数功能</th><th>参数解释</th></tr></thead><tbody><tr><td>dualformula</td><td>将公式变换为对偶式</td><td>s：公式字符串</td></tr><tr><td>print01</td><td>输出真值表中的一行</td><td>truthtable：布尔值列表</td></tr><tr><td>truthtable2</td><td>输出二元公式（仅限Q，R）所对应的真值表</td><td>s：公式字符串</td></tr><tr><td>truthtable3</td><td>输出三元公式（仅限P，Q，R）所对应的真值表</td><td>s：公式字符串</td></tr><tr><td>isargument2</td><td>输出真值表验证二元逻辑推论（仅限Q，R）</td><td>pre：前提集合，s：推论</td></tr><tr><td>isargument3</td><td>输出真值表验证三元逻辑推论（仅限P，Q，R）</td><td>pre：前提集合，s：推论</td></tr><tr><td>isequation2</td><td>输出真值表验证二元等价关系（仅限Q，R）</td><td>e1：公式1，e2：公式2</td></tr><tr><td>isequation3</td><td>输出真值表验证三元等价关系（仅限P，Q，R）</td><td>e1：公式1，e2：公式2</td></tr><tr><td>issubstitution2</td><td>输出真值表验证二元代换式前后等值（仅限Q，R）</td><td>s：公式，t：子式，s1：替换式</td></tr><tr><td>issubstitution3</td><td>输出真值表验证三元代换式前后等值（仅限P，Q，R）</td><td>s：公式，t：子式，s1：替换式</td></tr><tr><td>invassignment</td><td>为命题变元实现相反指派</td><td>s：公式字符串</td></tr><tr><td>dualreplace</td><td>将逻辑运算符转换为python逻辑运算符</td><td>s：公式字符串</td></tr></tbody></table><h4 id="运行示例"><a href="#运行示例" class="headerlink" title="运行示例"></a>运行示例</h4><p>用pycharm或vscode打开文件夹，并运行<code>test.py</code>文件（或打开<code>test.py</code>文件所在位置，在命令行中运行<code>python test.py</code>）</p><p>程序将输出一段真值表如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x27;Q   R   (Q and R)&#x27;</span><br><span class="line">0   0   0   </span><br><span class="line">0   1   0</span><br><span class="line">1   0   0</span><br><span class="line">1   1   1</span><br></pre></td></tr></table></figure><p>可参照<code>test.py</code>中的代码逻辑应用<code>logic</code>模块中实现的函数</p><blockquote><p><code>logic.py</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">or   and  not</span></span><br><span class="line"><span class="string">∨   ∧   ¬</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ch1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dualformula</span>(<span class="params">s</span>):</span><br><span class="line">    s1 = s.replace(<span class="string">&#x27;∨&#x27;</span>, <span class="string">&#x27;|&#x27;</span>)</span><br><span class="line">    s1 = s.replace(<span class="string">&#x27;∧&#x27;</span>, <span class="string">&#x27;∨&#x27;</span>)</span><br><span class="line">    s1 = s.replace(<span class="string">&#x27;|&#x27;</span>,<span class="string">&#x27;∧&#x27;</span>)</span><br><span class="line">    s1 = s.replace(<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;F&#x27;</span>)</span><br><span class="line">    s1 = s.replace(<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    s1 = s.replace(<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> s1</span><br><span class="line"></span><br><span class="line"><span class="comment"># ch2</span></span><br><span class="line"><span class="comment"># ch2-1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print01</span>(<span class="params">truthtable</span>):</span><br><span class="line">    <span class="keyword">for</span> tv <span class="keyword">in</span> truthtable:</span><br><span class="line">        <span class="keyword">if</span> tv:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;1&quot;</span>, end=<span class="string">&quot;   &quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;0&quot;</span>, end=<span class="string">&quot;   &quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">truthtable2</span>(<span class="params">s</span>):</span><br><span class="line">    w = <span class="string">&#x27;Q   R   &#x27;</span>+s</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%r&quot;</span>%w)</span><br><span class="line">    truth = &#123;<span class="literal">True</span>, <span class="literal">False</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> Q <span class="keyword">in</span> truth:</span><br><span class="line">        <span class="keyword">for</span> R <span class="keyword">in</span> truth:</span><br><span class="line">            f = <span class="built_in">eval</span>(s)</span><br><span class="line">            t = [Q, R]+[f]</span><br><span class="line">            print01(t)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">truthtable3</span>(<span class="params">s</span>):</span><br><span class="line">    w = <span class="string">&#x27;P   Q   R   &#x27;</span>+s</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%r&quot;</span>%w)</span><br><span class="line">    truth = &#123;<span class="literal">True</span>, <span class="literal">False</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> P <span class="keyword">in</span> truth:</span><br><span class="line">        <span class="keyword">for</span> Q <span class="keyword">in</span> truth:</span><br><span class="line">            <span class="keyword">for</span> R <span class="keyword">in</span> truth:</span><br><span class="line">                f = <span class="built_in">eval</span>(s)</span><br><span class="line">                t = [P, Q, R]+[f]</span><br><span class="line">                print01(t)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ch2-2</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isargument2</span>(<span class="params">pre, s</span>):</span><br><span class="line">    w=<span class="string">&#x27;Q   R   &#x27;</span></span><br><span class="line">    <span class="keyword">for</span> u <span class="keyword">in</span> pre:</span><br><span class="line">        w = w + u + <span class="string">&#x27;   &#x27;</span></span><br><span class="line">    w = w + <span class="string">&#x27;╞   &#x27;</span> + s</span><br><span class="line">    <span class="built_in">print</span>(w)</span><br><span class="line">    truth = &#123;<span class="literal">True</span>, <span class="literal">False</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> Q <span class="keyword">in</span> truth:</span><br><span class="line">        <span class="keyword">for</span> R <span class="keyword">in</span> truth:</span><br><span class="line">            pv = []</span><br><span class="line">            <span class="keyword">for</span> pk <span class="keyword">in</span> pre:</span><br><span class="line">                pv = pv + [<span class="built_in">eval</span>(pk)]</span><br><span class="line">            f = <span class="built_in">eval</span>(s)</span><br><span class="line">            t = [Q, R] + pv + [f]</span><br><span class="line">            print01(t)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isargument3</span>(<span class="params">pre, s</span>):</span><br><span class="line">    w=<span class="string">&#x27;P   Q   R   &#x27;</span></span><br><span class="line">    <span class="keyword">for</span> u <span class="keyword">in</span> pre:</span><br><span class="line">        w = w + u + <span class="string">&#x27;   &#x27;</span></span><br><span class="line">    w = w + <span class="string">&#x27;╞&#x27;</span> + s</span><br><span class="line">    <span class="built_in">print</span>(w)</span><br><span class="line">    truth = &#123;<span class="literal">True</span>, <span class="literal">False</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> P <span class="keyword">in</span> truth:</span><br><span class="line">        <span class="keyword">for</span> Q <span class="keyword">in</span> truth:</span><br><span class="line">            <span class="keyword">for</span> R <span class="keyword">in</span> truth:</span><br><span class="line">                pv = []</span><br><span class="line">                <span class="keyword">for</span> pk <span class="keyword">in</span> pre:</span><br><span class="line">                    pv = pv + [<span class="built_in">eval</span>(pk)]</span><br><span class="line">                f = <span class="built_in">eval</span>(s)</span><br><span class="line">                t = [P, Q, R] + pv + [f]</span><br><span class="line">                print01(t)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isequation2</span>(<span class="params">e1, e2</span>):</span><br><span class="line">    w=<span class="string">&#x27;Q   R   &#x27;</span>+e1+<span class="string">&#x27;   &#x27;</span>+e2+<span class="string">&#x27;   e1==e2&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(w)</span><br><span class="line">    truth = &#123;<span class="literal">True</span>, <span class="literal">False</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> Q <span class="keyword">in</span> truth:</span><br><span class="line">        <span class="keyword">for</span> R <span class="keyword">in</span> truth:</span><br><span class="line">            f1 = <span class="built_in">eval</span>(e1)</span><br><span class="line">            f2 = <span class="built_in">eval</span>(e2)</span><br><span class="line">            t = [Q, R] + [f1, f2] + [f1 == f2]</span><br><span class="line">            print01(t)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isequation3</span>(<span class="params">e1, e2</span>):</span><br><span class="line">    w=<span class="string">&#x27;P   Q   R   &#x27;</span>+e1+<span class="string">&#x27;   &#x27;</span>+e2+<span class="string">&#x27;   e1==e2&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(w)</span><br><span class="line">    truth = &#123;<span class="literal">True</span>, <span class="literal">False</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> P <span class="keyword">in</span> truth:</span><br><span class="line">        <span class="keyword">for</span> Q <span class="keyword">in</span> truth:</span><br><span class="line">            <span class="keyword">for</span> R <span class="keyword">in</span> truth:</span><br><span class="line">                f1 = <span class="built_in">eval</span>(e1)</span><br><span class="line">                f2 = <span class="built_in">eval</span>(e2)</span><br><span class="line">                t = [P, Q, R] + [f1, f2] + [f1 == f2]</span><br><span class="line">                print01(t)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ch2-3</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">issubstitution2</span>(<span class="params">s, t, s1</span>):</span><br><span class="line">    w=<span class="string">&#x27;Q   R   f1   f2   f1==f2&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%r&quot;</span>%w)</span><br><span class="line">    rv = [s, t, s1]</span><br><span class="line">    truth = &#123;<span class="literal">True</span>, <span class="literal">False</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> Q <span class="keyword">in</span> truth:</span><br><span class="line">        <span class="keyword">for</span> R <span class="keyword">in</span> truth:</span><br><span class="line">            f1 = <span class="built_in">eval</span>(s.replace(t, s1))</span><br><span class="line">            v = <span class="built_in">str</span>(<span class="built_in">eval</span>(s1))</span><br><span class="line">            f2 = <span class="built_in">eval</span>(s.replace(t, v))</span><br><span class="line">            tv = [Q, R] + [f1, f2] + [f1 == f2]</span><br><span class="line">            print01(tv)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">issubstitution3</span>(<span class="params">s ,t ,s1</span>):</span><br><span class="line">    w=<span class="string">&#x27;P   Q   R   f1  f2  f1==f2&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%r&quot;</span>%w)</span><br><span class="line">    rv = [s, t, s1]</span><br><span class="line">    truth = &#123;<span class="literal">True</span>, <span class="literal">False</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> P <span class="keyword">in</span> truth:</span><br><span class="line">        <span class="keyword">for</span> Q <span class="keyword">in</span> truth:</span><br><span class="line">            <span class="keyword">for</span> R <span class="keyword">in</span> truth:</span><br><span class="line">                f1 = <span class="built_in">eval</span>(s.replace(t, s1))</span><br><span class="line">                v = <span class="built_in">str</span>(<span class="built_in">eval</span>(s1))</span><br><span class="line">                f2 = <span class="built_in">eval</span>(s.replace(t, v))</span><br><span class="line">                tv = [Q, R] + [f1, f2] + [f1 == f2]</span><br><span class="line">                print01(tv)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">invassignment</span>(<span class="params">s</span>):</span><br><span class="line">    s = s.replace(<span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;(¬P)&#x27;</span>)</span><br><span class="line">    s = s.replace(<span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;(¬Q)&#x27;</span>)</span><br><span class="line">    s = s.replace(<span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;(¬R)&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dualreplace</span>(<span class="params">s</span>):</span><br><span class="line">    s = s.replace(<span class="string">&#x27;∨&#x27;</span>, <span class="string">&#x27; or &#x27;</span>)</span><br><span class="line">    s = s.replace(<span class="string">&#x27;∧&#x27;</span>, <span class="string">&#x27; and &#x27;</span>)</span><br><span class="line">    s = s.replace(<span class="string">&#x27;¬&#x27;</span>, <span class="string">&#x27; not &#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 离散数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数理逻辑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>离散数学1编程作业整理</title>
      <link href="/2023/08/08/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A61%E7%BC%96%E7%A8%8B%E4%BD%9C%E4%B8%9A%E6%95%B4%E7%90%86/"/>
      <url>/2023/08/08/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A61%E7%BC%96%E7%A8%8B%E4%BD%9C%E4%B8%9A%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>《离散数学（信息类）》$^{【注】}$（2023年春季）课程中涉及到的编程题（in Python）整理。</p><blockquote><p>【注】一门被千夫所指的课</p></blockquote><h1 id="第3次作业"><a href="#第3次作业" class="headerlink" title="第3次作业"></a>第3次作业</h1><blockquote><p>用python编写一个函数 <code>f(s: str) -&gt; str</code> ，判断一个合式公式$s$是永真式、永假式还是可满足式</p><p>(在$s$中，命题变元最多有p,q,r三个，仅包含与、或、非三种运算，用 and,or,not来表示)</p><p>函数要求：读入满足上述要求的代表$s$的非空字符串，如果是永真式则返回“永真式”，如果不是永真式但是可满足式则返回“可满足式”，如果是永假式返回“永假式”(不要返回引号)</p></blockquote><ul><li>my solution：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">formula = <span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只提交自定义函数部分</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">judgeFormula</span>(<span class="params">s</span>):</span><br><span class="line">    truth = &#123;<span class="literal">True</span>, <span class="literal">False</span>&#125;</span><br><span class="line">    num_of_1 = <span class="number">0</span></span><br><span class="line">    num_of_0 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> truth:</span><br><span class="line">        <span class="keyword">for</span> q <span class="keyword">in</span> truth:</span><br><span class="line">            <span class="keyword">for</span> r <span class="keyword">in</span> truth:</span><br><span class="line">                ss = <span class="built_in">eval</span>(s)</span><br><span class="line">                <span class="keyword">if</span> ss:</span><br><span class="line">                    num_of_1 += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    num_of_0 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> num_of_1 &gt; <span class="number">0</span> <span class="keyword">and</span> num_of_0 == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;永真式&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> num_of_1 &gt; <span class="number">0</span> <span class="keyword">and</span> num_of_0 &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;可满足式&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> num_of_1 == <span class="number">0</span> <span class="keyword">and</span> num_of_0 &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;永假式&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(judgeFormula(formula))</span><br></pre></td></tr></table></figure><ul><li>标程</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 标程：一种更简介的写法</span></span><br><span class="line">s=<span class="built_in">input</span>()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">s</span>):</span><br><span class="line">    cnt = <span class="built_in">sum</span>([<span class="built_in">int</span>(<span class="built_in">eval</span>(s)) <span class="keyword">for</span> p <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">           <span class="keyword">for</span> q <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">1</span>] <span class="keyword">for</span> r <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">1</span>]])</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;永真式&quot;</span> <span class="keyword">if</span> cnt == <span class="number">8</span> <span class="keyword">else</span>\</span><br><span class="line">           <span class="string">&quot;永假式&quot;</span> <span class="keyword">if</span> cnt == <span class="number">0</span> <span class="keyword">else</span>\</span><br><span class="line">           <span class="string">&quot;可满足式&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f(s))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="literal">True</span>))</span><br></pre></td></tr></table></figure><h1 id="第5次作业（编程题）"><a href="#第5次作业（编程题）" class="headerlink" title="第5次作业（编程题）"></a>第5次作业（编程题）</h1><h2 id="小题1"><a href="#小题1" class="headerlink" title="小题1"></a>小题1</h2><blockquote><p>自行给逻辑变量 p,q 赋值，用 python 编程计算$¬p,p∨q,p∧q,p⊕q$，并在一行内输出这四个值 (用空格隔开)(简答题)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p, q = <span class="literal">True</span>, <span class="literal">False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; &#123;&#125; &#123;&#125; &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">int</span>(<span class="keyword">not</span> p), <span class="built_in">int</span>(p|q), <span class="built_in">int</span>(p&amp;q), <span class="built_in">int</span>(p^q)))</span><br></pre></td></tr></table></figure><h2 id="小题2"><a href="#小题2" class="headerlink" title="小题2"></a>小题2</h2><blockquote><p>实现一个函数 <code>cycleVal(S:str, P, Q, R)</code>.</p><p>S为一包含且仅包含P,Q,R的合式公式</p><p>S所使用的联结词仅包括¬,^,V，分别用 not,and,or 表示</p><p>P,Q,R分别取它们在指派函数$\sigma$下的值</p><p><code>cycleVal()</code> 应返回 $\sigma(S[P/R,Q/P,R/Q])$的值，返回值为bool型</p></blockquote><ul><li>冗杂的my solution</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cycleVal</span>(<span class="params">S, P, Q, R</span>):</span><br><span class="line">    S = S.replace(<span class="string">&#x27;P&#x27;</span>, <span class="built_in">str</span>(<span class="built_in">int</span>(R)))</span><br><span class="line">    S = S.replace(<span class="string">&#x27;Q&#x27;</span>, <span class="built_in">str</span>(<span class="built_in">int</span>(P)))</span><br><span class="line">    S = S.replace(<span class="string">&#x27;R&#x27;</span>, <span class="built_in">str</span>(<span class="built_in">int</span>(Q)))</span><br><span class="line">    judge = <span class="built_in">eval</span>(S)</span><br><span class="line">    <span class="keyword">if</span> judge:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(cycleVal(s, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br></pre></td></tr></table></figure><ul><li>简洁的标程</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cyclyeVal</span>(<span class="params">S: <span class="built_in">str</span>, P, Q, R</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    P, Q, R = R, P, Q</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bool</span>(<span class="built_in">eval</span>(S))</span><br></pre></td></tr></table></figure><h2 id="小题3"><a href="#小题3" class="headerlink" title="小题3"></a>小题3</h2><blockquote><p>实现一个函数 <code>terms(s:str)</code>，输入s为一合式公式，返回s的主合取范式中包含析取式的数量。其中，s中的联结词仅可能包含¬,∧,∨，分别用 not,and,or 表示，s中的变元包含且仅包含$P,Q,R$。</p></blockquote><ul><li>笨拙的my solution</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">terms</span>(<span class="params">s</span>):</span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    table = &#123;<span class="literal">True</span>, <span class="literal">False</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> P <span class="keyword">in</span> table:</span><br><span class="line">        <span class="keyword">for</span> Q <span class="keyword">in</span> table:</span><br><span class="line">            <span class="keyword">for</span> R <span class="keyword">in</span> table:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">int</span>(<span class="built_in">eval</span>(s)) == <span class="number">0</span>:</span><br><span class="line">                    cnt += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> cnt</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(terms(s))</span><br></pre></td></tr></table></figure><ul><li>简洁的标程</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 考虑真值表，注意到主析取范式中的每一项对应且只对应一个 0，因此显然只需要统计真值表中 0 的数量即可。</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">terms</span>(<span class="params">s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>([<span class="built_in">int</span>(<span class="keyword">not</span> <span class="built_in">eval</span>(s)) <span class="keyword">for</span> P <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">               <span class="keyword">for</span> Q <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">1</span>] <span class="keyword">for</span> R <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">1</span>]])</span><br></pre></td></tr></table></figure><h1 id="挑战性任务（加分题）—Problem-A"><a href="#挑战性任务（加分题）—Problem-A" class="headerlink" title="挑战性任务（加分题）—Problem A"></a>挑战性任务（加分题）—Problem A</h1><blockquote><p><strong>题目A：</strong></p><p>通过Python语言，编程实现：</p><p>1）生成符合条件的合式公式，联结词集合$\{¬, ∧, ∨, →, ↔, ⊕\}$，变元数量为$m$，公式复杂度为$n$；</p><p>2）判断生成的公式是不是永真式，永假式，可满足式；</p><p>3）判断生成的两个公式否是逻辑等价。</p><p>本题评分标准：</p><p>1）若可以根据输入的$m$和$n$的随机生成正确的公式，则根据生成公式的多样性评分0～30分。</p><p>2）输入$k$条测试公式，根据正确判断数得分$k_0/k*20$，其中$k$测试公式总数，$k_0$为程序输出正确结果的公式数目；</p><p>3）采用$m$对公式对程序进行测试，判断是否逻辑等价，$m_0$为正确判断的数目。基于真值表的方法得分$m_0$，基于等值演算的方法得分$m_0/m*50$</p><p>本题加分条件：</p><ul><li>根据以上得分排序，每个班级选取前3名加分，分数相同者按照系统提交时间排序，早提交者排序在前。</li></ul></blockquote><p><strong>my solution：</strong></p><p>Under the condition of limited capability，在本人蹩脚的Python水平下，with the little help of <code>ChatGPT</code>，于是写出这么大一<strong>坨</strong>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># m = eval(input(&quot;输入m:&quot;))</span></span><br><span class="line"><span class="comment"># n = eval(input(&quot;输入n:&quot;))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Produce</span>(<span class="params">m, n</span>):</span><br><span class="line">    variable = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m+<span class="number">1</span>):</span><br><span class="line">        variable.append(<span class="string">&#x27;p&#x27;</span>+<span class="built_in">str</span>(i))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params"><span class="built_in">complex</span>, control</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        complex - 公式复杂度</span></span><br><span class="line"><span class="string">        control - 解释如下：</span></span><br><span class="line"><span class="string">            为在保证公式的复杂度为n的同时，保证生成公式的多样性，设置一个参数control来确定某一轮递归生成的公式复杂度是严格为n还是介于[0,n]</span></span><br><span class="line"><span class="string">            control = 1: 严格控制当前生成公式的复杂度为n（直接赋值），然后在②③④共3种情况中选一种递归（随机产生）</span></span><br><span class="line"><span class="string">            control = 0: 当前生成公式的复杂度[0,n]（随机产生），然后在①②③④共4种情况中选一种递归（随机产生）</span></span><br><span class="line"><span class="string">              ① 左公式和右公式都control = 0;</span></span><br><span class="line"><span class="string">              ② 左公式control = 0，右公式control = 1；</span></span><br><span class="line"><span class="string">              ③ 左公式control = 1，右公式control = 0；</span></span><br><span class="line"><span class="string">              ④ 左公式和右公式都control = 0</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">complex</span> == <span class="number">0</span>:                                    <span class="comment">#递归边界</span></span><br><span class="line">            <span class="keyword">return</span> random.choice(variable)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> control == <span class="number">1</span>:                                    <span class="comment">#依据当前control来确定next_complex和control_mode(即情况①~④中其一)</span></span><br><span class="line">            next_complex = <span class="built_in">complex</span> - <span class="number">1</span></span><br><span class="line">            control_mode = random.randint(<span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">        <span class="keyword">elif</span> control == <span class="number">0</span>:</span><br><span class="line">            next_complex = random.randint(<span class="number">0</span>, <span class="built_in">complex</span>-<span class="number">1</span>)</span><br><span class="line">            control_mode = random.randint(<span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> control_mode == <span class="number">1</span>:                               <span class="comment">#依据control_mode(即情况①~④中其一)来确定左、右公式接下来的control</span></span><br><span class="line">            left_control, right_control = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> control_mode == <span class="number">2</span>:</span><br><span class="line">            left_control, right_control = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> control_mode == <span class="number">3</span>:</span><br><span class="line">            left_control, right_control = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> control_mode == <span class="number">4</span>:</span><br><span class="line">            left_control, right_control = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        create_mode = random.randint(<span class="number">1</span>, <span class="number">6</span>)                  <span class="comment">#随机选择一个联结词</span></span><br><span class="line">        <span class="keyword">if</span> create_mode == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span>  <span class="string">&#x27;(&#x27;</span> + <span class="string">&#x27;¬&#x27;</span> + create(next_complex, <span class="number">1</span>) + <span class="string">&#x27;)&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> create_mode == <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;(&#x27;</span> + create(next_complex, left_control) + <span class="string">&#x27;∧&#x27;</span> + create(next_complex, right_control) +<span class="string">&#x27;)&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> create_mode == <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;(&#x27;</span> + create(next_complex, left_control) + <span class="string">&#x27;∨&#x27;</span> + create(next_complex, right_control) +<span class="string">&#x27;)&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> create_mode == <span class="number">4</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;(&#x27;</span> + create(next_complex, left_control) + <span class="string">&#x27;→&#x27;</span> + create(next_complex, right_control) +<span class="string">&#x27;)&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> create_mode == <span class="number">5</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;(&#x27;</span> + create(next_complex, left_control) + <span class="string">&#x27;↔&#x27;</span> + create(next_complex, right_control) +<span class="string">&#x27;)&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> create_mode == <span class="number">6</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;(&#x27;</span> + create(next_complex, left_control) + <span class="string">&#x27;⨁&#x27;</span> + create(next_complex, right_control) +<span class="string">&#x27;)&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:                <span class="comment">#检查s的是否涵盖了所有m个变元, 若变元数量不达m, 重复create</span></span><br><span class="line">        result = create(n, <span class="number">1</span>)</span><br><span class="line">        isQualified = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> variable:</span><br><span class="line">            <span class="keyword">if</span> (i <span class="keyword">in</span> result) == <span class="literal">False</span>:</span><br><span class="line">                isQualified = <span class="number">0</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> isQualified:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(result)</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">TrueOrNot</span>(<span class="params">m</span>):</span><br><span class="line">    variable = []                       <span class="comment">#确定变元数量以及变元列表variable[]</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        vari = <span class="string">&#x27;p&#x27;</span> + <span class="built_in">str</span>(i)</span><br><span class="line">        <span class="keyword">if</span> vari <span class="keyword">not</span> <span class="keyword">in</span> m:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        variable.append(vari)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">transform</span>(<span class="params">m</span>):                   <span class="comment">#转换成可以求值的语句</span></span><br><span class="line">        m = m.replace(<span class="string">&#x27;¬&#x27;</span>, <span class="string">&#x27; not &#x27;</span>)</span><br><span class="line">        m = m.replace(<span class="string">&#x27;∧&#x27;</span>, <span class="string">&#x27; and &#x27;</span>)</span><br><span class="line">        m = m.replace(<span class="string">&#x27;∨&#x27;</span>, <span class="string">&#x27; or &#x27;</span>)</span><br><span class="line">        m = m.replace(<span class="string">&#x27;→&#x27;</span>, <span class="string">&#x27; &lt;= &#x27;</span>)</span><br><span class="line">        m = m.replace(<span class="string">&#x27;↔&#x27;</span>, <span class="string">&#x27; == &#x27;</span>)</span><br><span class="line">        m = m.replace(<span class="string">&#x27;⨁&#x27;</span>, <span class="string">&#x27; ^ &#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    m = transform(m)</span><br><span class="line">    num_of_1, num_of_0 = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    values = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span> ** <span class="built_in">len</span>(variable)):</span><br><span class="line">        values.append(numpy.binary_repr(i, <span class="built_in">len</span>(variable)))</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> values:</span><br><span class="line">        value_dict = <span class="built_in">dict</span>(<span class="built_in">zip</span>(variable, <span class="built_in">list</span>(value)))</span><br><span class="line">        tmp = m <span class="comment">#备份m</span></span><br><span class="line">        <span class="keyword">for</span> elem <span class="keyword">in</span> variable:</span><br><span class="line">            tmp = tmp.replace(elem, value_dict[elem])</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">eval</span>(tmp):</span><br><span class="line">            num_of_1 += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            num_of_0 += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> num_of_1 &gt; <span class="number">0</span> <span class="keyword">and</span> num_of_0 == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>    <span class="comment">#永真式</span></span><br><span class="line">    <span class="keyword">elif</span> num_of_1 &gt; <span class="number">0</span> <span class="keyword">and</span> num_of_0 &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>    <span class="comment">#可满足式</span></span><br><span class="line">    <span class="keyword">elif</span> num_of_1 == <span class="number">0</span> <span class="keyword">and</span> num_of_0 &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>    <span class="comment">#永假式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">EqualOrNot</span>(<span class="params">m, n</span>):</span><br><span class="line">    variable = []                       <span class="comment">#确定变元数量以及变元列表variable[]</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        vari = <span class="string">&#x27;p&#x27;</span> + <span class="built_in">str</span>(i)</span><br><span class="line">        <span class="keyword">if</span> vari <span class="keyword">not</span> <span class="keyword">in</span> m <span class="keyword">and</span> vari <span class="keyword">not</span> <span class="keyword">in</span> n:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        variable.append(vari)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="comment"># print(variable)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">transform</span>(<span class="params">m</span>):                   <span class="comment">#转换成可以求值的语句</span></span><br><span class="line">        m = m.replace(<span class="string">&#x27;¬&#x27;</span>, <span class="string">&#x27; not &#x27;</span>)</span><br><span class="line">        m = m.replace(<span class="string">&#x27;∧&#x27;</span>, <span class="string">&#x27; and &#x27;</span>)</span><br><span class="line">        m = m.replace(<span class="string">&#x27;∨&#x27;</span>, <span class="string">&#x27; or &#x27;</span>)</span><br><span class="line">        m = m.replace(<span class="string">&#x27;→&#x27;</span>, <span class="string">&#x27; &lt;= &#x27;</span>)</span><br><span class="line">        m = m.replace(<span class="string">&#x27;↔&#x27;</span>, <span class="string">&#x27; == &#x27;</span>)</span><br><span class="line">        m = m.replace(<span class="string">&#x27;⨁&#x27;</span>, <span class="string">&#x27; ^ &#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line">    m = transform(m)</span><br><span class="line">    n = transform(n)</span><br><span class="line">    values = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span> ** <span class="built_in">len</span>(variable)):</span><br><span class="line">        values.append(numpy.binary_repr(i, <span class="built_in">len</span>(variable)))</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> values:</span><br><span class="line">        value_dict = <span class="built_in">dict</span>(<span class="built_in">zip</span>(variable, <span class="built_in">list</span>(value)))</span><br><span class="line">        tmp1 = m <span class="comment">#备份m和n</span></span><br><span class="line">        tmp2 = n</span><br><span class="line">        <span class="keyword">for</span> elem <span class="keyword">in</span> variable:</span><br><span class="line">            tmp1 = tmp1.replace(elem, value_dict[elem])</span><br><span class="line">            tmp2 = tmp2.replace(elem, value_dict[elem])</span><br><span class="line">        <span class="comment"># 如果两个公式的值不相等，则它们不是逻辑等价</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">eval</span>(tmp1) != <span class="built_in">eval</span>(tmp2):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="comment"># 如果真值表中所有情况下公式1和公式2的值都相等，则它们是逻辑等价</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># #生成公式测试+判断永真式/永假式/可满足式测试</span></span><br><span class="line"><span class="comment"># for i in range(100):</span></span><br><span class="line"><span class="comment">#     tmp = Produce(m, n)</span></span><br><span class="line"><span class="comment">#     print(tmp)</span></span><br><span class="line"><span class="comment">#     # print(TrueOrNot(tmp))</span></span><br><span class="line"><span class="comment"># print(&quot;*******&quot;)</span></span><br><span class="line"><span class="comment"># #永真式测试:</span></span><br><span class="line"><span class="comment"># print(TrueOrNot(&quot;((¬(p1∧p2))↔((¬p1)∨(¬p2)))&quot;))</span></span><br><span class="line"><span class="comment"># #可满足式测试:</span></span><br><span class="line"><span class="comment"># print(TrueOrNot(&quot;(p1→(p2→p3))&quot;))</span></span><br><span class="line"><span class="comment"># #永假式测试:</span></span><br><span class="line"><span class="comment"># print(TrueOrNot(&quot;((¬(p2→p1))∧(p1))&quot;))</span></span><br><span class="line"><span class="comment"># #逻辑等价测试0</span></span><br><span class="line"><span class="comment"># s1 = Produce(3,4)</span></span><br><span class="line"><span class="comment"># s2 = Produce(9,6)</span></span><br><span class="line"><span class="comment"># print(EqualOrNot(s1, s2))</span></span><br><span class="line"><span class="comment"># #测试逻辑等价1</span></span><br><span class="line"><span class="comment"># print(EqualOrNot(&quot;(p1∧(p2∨p3))&quot;, &quot;((p1∧p2)∨(p1∧p3))&quot;))</span></span><br><span class="line"><span class="comment"># #测试逻辑等价2</span></span><br><span class="line"><span class="comment"># print(EqualOrNot(&quot;((p1→p2)∧(p1→p3))&quot;, &quot;(p1→(p2∧p3))&quot;))</span></span><br><span class="line"><span class="comment"># #测试逻辑等价3</span></span><br><span class="line"><span class="comment"># print(EqualOrNot(&quot;(p1→(p2→p3))&quot;, &quot;(p2→(p1→p3))&quot;))</span></span><br><span class="line"><span class="comment"># #测试逻辑等价4 - m和n变元数量不同的测试</span></span><br><span class="line"><span class="comment"># print(EqualOrNot(&quot;((p1→p2)→(p1∧p2))&quot;, &quot;(((¬p1)→p1)∧(p3→p1))&quot;))</span></span><br></pre></td></tr></table></figure><p># </p>]]></content>
      
      
      <categories>
          
          <category> 离散数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数理逻辑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>串的模式匹配</title>
      <link href="/2023/08/06/%E4%B8%B2%E7%9A%84%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/"/>
      <url>/2023/08/06/%E4%B8%B2%E7%9A%84%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<p>串的模式匹配（Pattern Matching）：字符串的定位。</p><p>给定一个<strong>主字符串</strong>$S$和一个子串$T$(又称<strong>模式串</strong>)，长度分别为$n$和$m$。在主串$S$中，从起始位置开始查找，若在主串$S$中找到一个与子串$T$相等的子串，则返回$T$的第一个字符在主串中的位置序号。</p><blockquote><p>例如：$S=$ <code>&quot;Beijing&amp;Nanjing&amp;Shanghai&quot;</code>      </p><p>​           $T=$ <code>&quot;jing&quot;</code></p><p>返回：$4$</p></blockquote><h1 id="经典的朴素字符串查找算法（Brute-Force"><a href="#经典的朴素字符串查找算法（Brute-Force" class="headerlink" title="经典的朴素字符串查找算法（Brute-Force)"></a>经典的朴素字符串查找算法（Brute-Force)</h1><p>时间复杂度：$O(nm)$</p><p>下面是2种形式的写法(写法1和写法2完全等价)</p><p>写法1：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">index</span><span class="params">(<span class="type">char</span> s[ ], <span class="type">char</span> t[ ])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i, j, k;</span><br><span class="line">    <span class="keyword">for</span>(i =<span class="number">0</span>; s[i] != <span class="string">&#x27;\0&#x27;</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j=i,k=<span class="number">0</span>;t[k]!=<span class="string">&#x27;\0&#x27;</span>&amp;&amp;s[j]==t[k]; j++,k++)</span><br><span class="line">        ;</span><br><span class="line">        <span class="keyword">if</span>(t[k] == <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> (i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写法2：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">index</span><span class="params">(<span class="type">char</span> S[ ], <span class="type">char</span> T[ ])</span> </span><br><span class="line">&#123;</span><br><span class="line">     <span class="type">int</span> i = <span class="number">0</span>,  j=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">while</span> ( S[i]!=<span class="string">&#x27;\0&#x27;</span>  &amp;&amp;  T[j]!=<span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (S [i] == T[j] ) &#123;</span><br><span class="line">             i++;   </span><br><span class="line">             j++ </span><br><span class="line">         &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            i = i-j +<span class="number">1</span>;</span><br><span class="line">            j = <span class="number">0</span>; </span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> ( T[j] == <span class="string">&#x27;\0&#x27;</span>) </span><br><span class="line">         <span class="keyword">return</span>  i-j;  </span><br><span class="line">    <span class="keyword">else</span>    </span><br><span class="line">         <span class="keyword">return</span> <span class="number">-1</span>;                   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>算法改进：</strong>当$S$中剩余字符数小于$T$中字符数$(n-i&lt;m)$时，停止查找</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">index</span><span class="params">(<span class="type">char</span> s[ ], <span class="type">char</span> t[ ])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i, j, k,n,m;</span><br><span class="line">    n = <span class="built_in">strlen</span>(s); </span><br><span class="line">    m = <span class="built_in">strlen</span>(t);</span><br><span class="line">    <span class="keyword">for</span>(i =<span class="number">0</span>; n-i &gt;= m; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j=i,k=<span class="number">0</span>;t[k]!=<span class="string">&#x27;\0&#x27;</span>&amp;&amp;s[j]==t[k]; j++,k++)</span><br><span class="line">            ;</span><br><span class="line"><span class="keyword">if</span>(t[k] == <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> ( i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>朴素字符串匹配算法存在的问题：</strong></p><p>当前匹配在找到不匹配的字符后，要将主串中下一次匹配开始位置移动一个位置（即要回溯），而不管当前匹配情况，如下图。</p><p><img src="/img/essay1-fig1.png" alt="图1"></p><h1 id="KMP-Knuth-Morris-Pratt-算法"><a href="#KMP-Knuth-Morris-Pratt-算法" class="headerlink" title="KMP(Knuth-Morris-Pratt)算法"></a>KMP(Knuth-Morris-Pratt)算法</h1><p>时间复杂度：$O(n+m)$</p><h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><p>源串称为主串，定义为$S$，当前匹配位置为$i$；目标串称为子串，定义为$T$，当前匹配位置为$j$。当前匹配在找到不匹配的字符后，重新开始匹配时：</p><ol><li>主串当前位置$i$不回溯，即不重置为上次匹配开始位置的一下位置；</li><li>子串当前位置$j$视情况回溯至起始串位置（0），或子串中某一位置。(如下图)</li></ol><p><img src="/img/essay1-fig2.png" alt="图2"></p><h2 id="next函数"><a href="#next函数" class="headerlink" title="next函数"></a>next函数</h2><p>KMP算法核心思想便是计算子串回溯位置。首先明确字符串的前缀和后缀的定义：</p><ul><li><strong>前缀：</strong>不包括最后一个字符的子串</li><li><strong>后缀：</strong>不包含第一个字符的子串</li></ul><p>根据子串$T$当前匹配的规律：  $ T_0…T_{k-1}=T_{j-k} …T_{j-1}$由当前失配位置$j$(已知) ，可以归纳计算下次匹配起点$k$的表达式。</p><p>令$k = next[ j ]$（函数$next$用子串当前位置$j$来计算下次开始匹配位置$k$，$k$ 与$j$ 显然具有函数关系），则<br>$$<br>next[j]=\begin{cases}-1&amp;,j=0\\max\{k\mid0&lt;k&lt;j且T_0…T_{k-1}=T_{j-k} …T_{j-1}\}\\0&amp;,其他情况\end{cases}<br>$$<br>注意：</p><ol><li><p>$k$值仅取决于子串本身而与相匹配的主串无关。</p></li><li><p>$k$值为子串从头向后及从j向前的两部分子串最大相同子串的长度。</p></li><li><p>这里的两部分子串<strong>可以有部分重叠</strong>的字符，但<strong>不可以全部重叠</strong>，即$k$最大为$j-1$。例如：</p></li></ol><p><img src="/img/essay1-fig3.png" alt="例图"></p><p><strong>算法分析：</strong></p><ol><li><p>首先必然有$next[0]=-1$，$next[1]=0$;</p></li><li><p>若存在$next[j]=k$，即存在$ T_0 \dots T_{k-1} = T_{j-k} \dots T_{j-1} $：</p><ul><li><p>若此时$T_{k}=T_{j} $，则存在$ T_{0} \dots T_{k-1} T_{k} = T_{j-k} \dots T_{j-1} T_{j}$，因此<br>$$<br>next[j+1]=next[j]+1=k+1\tag{1}<br>$$</p></li><li><p>若$T_k\neq T_j$，则继续$k:=next[k]$直到$k=-1$：</p><p>$repeat\ until\ k=-1\{$<br>$$<br>\begin{matrix}<br>k:=next[k]\\T_{k}=T_j\ ?\begin{cases}Yes:next[j+1]=k+1,break\\No:continue\end{cases}<br>\tag{2}<br>\end{matrix}<br>$$<br>$\}$</p></li></ul><p><strong>e.g.</strong>    $s=$<code>&quot;ababcabcabab&quot;</code></p><p><img src="/img/essay1-fig4.png" alt=""></p><p><strong>Step:</strong></p><ol start="0"><li>next[0]=-1；</li><li>next[1]=0；</li><li>next[2]=0；$T_0=T_2$</li><li>next[3]=1；$T_1=T_3$</li><li>next[4]=2；$T_2\neq T_4$，k=next[2]=0；$T_0 \neq T_4$，k=next[0]=-1，达到边界</li><li>next[5]=0；$T_0=T_5$</li><li>next[6]=1；$T_1=T_6$</li><li>next[7]=2；$T_2 \neq T_7$，k=next[2]=0；$T_0 \neq T_7$，k=next[0]=-1，达到边界</li><li>next[8]=0；$T_0=T_8$</li><li>next[9]=1；$T_1=T_9$</li><li>next[10]=2；$T_2=T_{10}$</li><li>next[11]=3；($T_3=T_{11}$)</li></ol></li></ol><blockquote><p><strong>思考：$T_k= T_j$时向后递推的正确性显然。但是为什么当$T_k\neq T_j$时，通过$k:=next[k]$<font color=orange>向前回溯</font>(如下)的方法的正确性呢？</strong></p></blockquote><p>$$<br>\begin{matrix} T_k=T_j?\\T_{next[k]}=T_j?\\T_{next[next[k]]}=T_j?\\\dots \<br>  \end{matrix}<br>$$<br>以下面这个模式串$T$为例：</p><p>当前缀$k=5,T_k=m$，后缀$j=11,T_{j}=x$时，$T_k\neq T_j$</p><p>那么$k$回溯为$next[k]=2$</p><p><img src="/img/essay1-fig5" alt="image-20230331224204741"></p><p>这样的回溯保证了$S_I$、$S_{II}$、$S_{III}$和$S_{IV}$四个字串完全相等，尤其是$S_I$和$S_{IV}$两个字串的完全相等保证了$S_I+T_k$组成新的前缀，$S_{IV}+T_j$组成新的后缀，通过判断新的$T_k=T_j?$便可以再次递推(向前或回溯)。当回溯到$k=-1$时达到边界。</p><p><img src="/img/essay1-fig6" alt="image-20230331224222506"></p><p><strong>getnext函数：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">getnext</span><span class="params">(<span class="type">char</span> T[], <span class="type">int</span> next[])</span></span><br><span class="line">&#123;  </span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>, j=<span class="number">-1</span>;</span><br><span class="line">    next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(T[i]!=<span class="string">&#x27;\0&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(j==<span class="number">-1</span> || T[i]==T[j])&#123; <span class="comment">//i为后缀位置；j为前缀位置</span></span><br><span class="line">            i++; </span><br><span class="line">            j++; </span><br><span class="line">            next[i]=j; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            j = next[j]; <span class="comment">//若字符不同，则j值回溯</span></span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>KMPindex函数：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">KMPindex</span><span class="params">(<span class="type">char</span> S[ ], <span class="type">char</span> T[ ])</span> </span><br><span class="line">&#123;</span><br><span class="line">     <span class="type">int</span> i = <span class="number">0</span>,  j=<span class="number">0</span>, *next;</span><br><span class="line"></span><br><span class="line">     next = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*(<span class="built_in">strlen</span>(T)+<span class="number">1</span>));</span><br><span class="line">     getnext(T, next);</span><br><span class="line">     <span class="keyword">while</span> ( S[i]!= <span class="string">&#x27;\0&#x27;</span>  &amp;&amp;  T[j]!= <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (S [i] == T[j] ) &#123;</span><br><span class="line">             i++;   </span><br><span class="line">             j++ ;</span><br><span class="line">         &#125; </span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">             (j == <span class="number">0</span>) ? i++ :( j = next[j]); <span class="comment">//j回退到相应位置开始匹配，i值不变</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="built_in">free</span>(next);</span><br><span class="line">     <span class="keyword">if</span> ( T[j] == <span class="string">&#x27;\0&#x27;</span>) <span class="comment">//匹配成功，返回匹配位置</span></span><br><span class="line">         <span class="keyword">return</span>  i-j;  </span><br><span class="line">    <span class="keyword">else</span>    </span><br><span class="line">         <span class="keyword">return</span> <span class="number">-1</span>;                   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于下标$i$无须回溯，比较次数仅为$n$，即使加上计算$next[j]$时所用的比较次数$m$，比较总次数也仅为$n+m=O(n+m)$，大大快于朴素的Brute-Force算法。</p>]]></content>
      
      
      <categories>
          
          <category> data structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/08/06/hello-world/"/>
      <url>/2023/08/06/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
